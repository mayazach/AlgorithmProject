Όνομα εκτελέσιμου προγράμματος: lsh

Το πρόγραμμα μεταγλωτίζεται με την εντολή make, και καλείται από την γραμμή εντολής με τις εξής σημαίες σε οποιαδήποτε σειρά:
-d <input file>
-q <query file>
-o <output file>
-hash <classic/probabilistic>
-function <DFT/DTW>
-k <int> (προεραιτική, default τιμή 2)
-L  <int> (προεραιτική, default τιμή 3)
-stats (προεραιτική)

Οι άλλες τιμές που έχουν χρησημοποιηθεί στο πρόγραμμα είναι:
δ = 0.0005
w = 4
kvec = 3
μέγεθος hash table = n/16

Το πρόγραμμα διαβάζει ένα σύνολο από καμπύλες από το αρχείο εισόδου και τις αποθηκεύει σε L πίνακες κατακερματισμού, απεικονίζοντάς 
τες σε καμπύλες πλέγματος και χρησιμοποιώντας είτε κλασική είτε πιθανοκρατική συνάρτηση κατακερματισμού. Στη συνέχεια,για κάθε καμπύλη 
στο query dataset ψάχνει να βρει τον κοντινότερο γείτονα με LSH και τον συγκρίνει με τον πραγματικό γείτονα που βρίσκει με εξαντλητική 
αναζήτηση σε έναν από τους πίνακες κατακερματισμού. Η απόσταση από τους γείτονες σε κάθε περίπτωση υπολογίζεται είτε με Discrete Frechet 
Distance είτε με Dynamic Time Warping, ανάλογα τι επιλέγει ο χρήστης. Σε περίπτωση που ζητείται ο υπολογισμός στατιστικών, η εξαντλητική 
αναζήτηση γίνεται την πρώτη φορά που κατασκευάζεται η δομή αναζήτησης και τις υπόλοιπες 99 εφαρμόζεται μόνο LSH. Όταν δε ζητούνται 
στατιστικά, για κάθε καμπύλη βρίσκονται και οι γείτονες σε απόσταση R (μέχρι 10).

Αν η πρώτη γραμμή του query dataset είναι 3 η 4 θέτουμε τη διάσταση του χώρου των καμπύλων στο αντίστοιχο νούμερο. Αλλιώς θεωρούμε ότι 
η διάσταση είναι 2 και η πρώτη γραμμή περιέχει την πρώτη καμπύλη.

Στις δοκιμές του προγράμματος χρησιμοποιήθηκαν 11 καμπύλες από το ενδεικτικό dataset που δόθηκε. Τα αποτελέσματα έδειξαν ότι η Discrete 
Frechet Distance επέστρεφε αποτελέσματα με μικρότερη απόσταση από την αρχική καμπύλη απο ότι η Dynamic Time Warping σε λιγότερο χρόνο. Ο 
κλασικός κατακερματισμός επέστρεφε γείτονες σε ικανοποιητικό χρόνο, αλλά συνήθως δεν έβρισκε το σωστό κοντινότερο γείτονα με LSH. O 
κατακερματισμός με πιθανοκρατική συνάρτηση έβρισκε το σωστό κοντινότερο γείτονα 10 στις 11 φορές αλλά η δημιουργία της δομής αναζήτησης 
έπαιρνε σημαντικά περισσότερο χρόνο. 

Επειδή το πρόγραμμα παίρνει κάποια λεπτά για να ολοκληρωθεί όταν οι καμπύλες αναζήτησης είναι μεγάλες σε μέγεθος ή αριθμό, τυπώνει κάποια 
πράγματα και στην έξοδο καθώς εκτελείται για να φαίνεται η πορεία του.

Το πρόγραμμα περιλαμβάνει τα παρακάτω αρχεία:
-main.cpp: διάβασμα ορισμάτων της γραμμής εντολής, διάβασμα αρχείων εισόδου και αναζήτησης, αποθήκευση καμπυλών, κατασκευή δομών και αναζήτηση,
γράψιμο στο αρχείο εξόδου
-curve.h: αντικείμενο της καμπύλης, με τα σημεία και το id της, καθώς και αντικείμενο γείτονα καμπύλης, με το id και την απόσταση από αυτόν
-curveList.h,curveList.cpp: λίστα καμπυλών για αποθήκευση στους κάδους του πίνακα κατακερματισμού
-hah.h,hash.cpp: πίνακας κατακερματισμού για καμπύλες
-gridcurves.h,gridcurves.cpp: συνάρτηση απεικόνισης καμπύλης σε καμπύλες πλέγματος, κλασική και πιθανοκρατική συνάρτηση κατακερματισμού
-distance.h,distance.cpp: Discrete Frechet Distance, Dynamic Time Warping
-randomnum.h,randomnum.cpp: γεννήτριες τυχαίων αριθμών, με κανονική και ομοιόμορφη κατανομή, και αριθμών Marsaglia
